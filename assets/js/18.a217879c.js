(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{424:function(t,a,s){"use strict";s.r(a);var e=s(56),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("img",{attrs:{src:"/images/javascript-logo.png",alt:"Javascript-logo"}})]),t._v(" "),s("h1",{attrs:{id:"frontmatter-title"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[t._v("#")]),t._v(" "+t._s(t.$frontmatter.title))]),t._v(" "),s("h2",{attrs:{id:"변수"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#변수"}},[t._v("#")]),t._v(" 변수")]),t._v(" "),s("p",[t._v("변수란 쉽게 말해서 "),s("strong",[t._v("데이터를 저장하는 장소")]),t._v("입니다.")]),t._v(" "),s("h2",{attrs:{id:"선언"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#선언"}},[t._v("#")]),t._v(" 선언")]),t._v(" "),s("p",[t._v("변수를 사용하려면 먼저 선언을 해야합니다. 선언을 할 때는 다음과 같이 "),s("code",[t._v("var")]),t._v(" 키워드를 사용합니다.")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" value1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 한 번에 여러 개의 변수를 선언할 수 있음 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"까막"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 선언과 함께 초기화를 할 수 있음 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* age의 값을 출력하는 함수. Result: 17 */")]),t._v("\n")])])]),s("p",[t._v("C나 Java와 같은 언어를 접해보신 분이라면, 선언 시 자료형을 따로 명시하지 않는다는 점이 눈에 들어올 것입니다. 컴파일 시에 자료형을 결정하는 위 "),s("strong",[t._v("정적 언어")]),t._v("들과는 다르게 자바스크립트는 런타임에서 자료형이 결정되는 "),s("strong",[t._v("동적 언어")]),t._v("입니다. 즉, 자료형이 프로그램 실행 시 대입되는 값에 따라 알아서 결정되니 선언할 때 따로 적어주지 않아도 됩니다.")]),t._v(" "),s("p",[t._v("혹시 "),s("code",[t._v("let")]),t._v(", "),s("code",[t._v("const")]),t._v("라는 선언 키워드를 들어보셨나요? 사실 "),s("code",[t._v("var")]),t._v(" 키워드는 여러가지 잠재적 위험성을 가지고 있습니다. 이러한 단점을 보완하기 위해 ES6에서 새로 도입된 키워드가 "),s("code",[t._v("let")]),t._v("과 "),s("code",[t._v("const")]),t._v(" 키워드인데요, 이와 관련해서는 추후에 따로 정리하도록 하겠습니다.")]),t._v(" "),s("h2",{attrs:{id:"대입"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#대입"}},[t._v("#")]),t._v(" 대입")]),t._v(" "),s("p",[t._v("대입이란 변수에 데이터를 저장하는 것을 말합니다. 다음과 같이 "),s("code",[t._v("=")]),t._v(" 연산자를 사용합니다.")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" year "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2019")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 선언과 함께 초기화를 하며 year 변수에 2019를 대입합니다. */")]),t._v("\nyear "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 기존 year 변수에 2020를 새로 대입합니다. */")]),t._v("\n")])])]),s("h2",{attrs:{id:"자료형"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#자료형"}},[t._v("#")]),t._v(" 자료형")]),t._v(" "),s("p",[t._v("자료형에는 Number, String, Boolean, Undefined, Null, Object가 있습니다.\nES6에서 Symbol이라는 원시 자료형이 새로 추가되었는데, Symbol은 ES6을 다룰 때 따로 설명하도록 하겠습니다.")]),t._v(" "),s("p",[t._v("Object를 제외한 나머지 자료형은 원시 자료형(Primitive)이라고 불리며, 가장 단순한 형태의 데이터를 나타냅니다. 원시 자료형은 모든 값이 immutable, 즉 수정이 불가능하다는 특징이 있습니다.")]),t._v(" "),s("p",[t._v("다른 자료형은 이게 별 상관이 없을 수 있는데, String 자료형의 경우 조금 낯설 수 있습니다. 분명 다른 언어에서는 인덱스로 접근하거나 메서드를 호출해서 문자열을 수정할 수 있었던 것 같은데, 자바스크립트는 그럴 수 없거든요.")]),t._v(" "),s("p",[t._v("그럼 이제 하나하나 알아보도록 합시다.")]),t._v(" "),s("h3",{attrs:{id:"number"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[t._v("#")]),t._v(" Number")]),t._v(" "),s("p",[t._v("자바스크립트에서는 정수나 실수를 따로 구분하지 않고 그냥 Number 자료형 하나만 존재합니다.")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 정수 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.14")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 실수 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b00101010")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 2진수 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" oct "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0o52")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 8진수 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x2a")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 16진수 */")]),t._v("\n")])])]),s("p",[t._v("Number는 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/IEEE_754",target:"_blank",rel:"noopener noreferrer"}},[t._v("IEEE 754"),s("OutboundLink")],1),t._v("에 기술된 부동소수점 체계에 따라 -(2"),s("sup",[t._v("53")]),t._v("-1) ~ 2"),s("sup",[t._v("53")]),t._v("-1 범위의 수를 안전하게 표현할 수 있습니다.")]),t._v(" "),s("p",[t._v("숫자 값 외에 Infinity (무한대), -Infinity (-무한대), NaN (Not a Number. 산술 연산 불가)도 Number 자료형을 가집니다. 근데 왜 "),s("em",[t._v("Not a Number")]),t._v("가 Number 자료형인걸까요? 뭐, 아무튼 그렇답니다...")]),t._v(" "),s("p",[t._v("두 무한대 값은 연산의 결과가 무한대일 때 얻을 수 있습니다. 그리고 NaN에 관한 자세한 정보는 "),s("a",{attrs:{href:"https://javascriptrefined.io/nan-and-typeof-36cd6e2a4e43",target:"_blank",rel:"noopener noreferrer"}},[t._v("여기"),s("OutboundLink")],1),t._v("에서 확인하실 수 있습니다.")]),t._v(" "),s("h3",{attrs:{id:"string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" String")]),t._v(" "),s("p",[t._v("String 자료형은 문자열을 나타내는 데에 사용됩니다. 큰따옴표 혹은 작은따옴표로 감싸서 표현합니다.")]),t._v(" "),s("p",[t._v("문자열 내의 각 문자는 인덱스로 접근 가능합니다.")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abcd"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/* Result: "a" */')]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/* Result: "b" */')]),t._v("\n")])])]),s("p",[t._v("위에서 언급했듯이 자바스크립트의 문자열은 immutable합니다. 그러므로 변수에 저장된 문자열을 수정하고 싶다면 원하는 문자열을 따로 만든 뒤 그 값을 변수에 새로 대입해야 합니다.")]),t._v(" "),s("h3",{attrs:{id:"boolean"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#boolean"}},[t._v("#")]),t._v(" Boolean")]),t._v(" "),s("p",[s("code",[t._v("true")]),t._v(" 혹은 "),s("code",[t._v("false")]),t._v(" 값을 표현하는 자료형입니다.")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" condition1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" condition2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"undefined"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#undefined"}},[t._v("#")]),t._v(" Undefined")]),t._v(" "),s("p",[t._v("Undefined 자료형에 해당하는 "),s("code",[t._v("undefined")]),t._v(" 값은 다음과 같은 경우에 만나볼 수 있습니다.")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 선언 후 값을 대입하지 않은 변수 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" unused"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unused"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Result: undefined */")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 인자를 필요로 하는 함수를 호출할 때 인자를 전달하지 않는 경우 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("param")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("param"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Result: undefined */")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 명시적으로 return을 하지 않는 함수의 return 값 */")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Result: undefined (물론 func 함수 내의 console.log 함수도 따로 값을 출력합니다) */")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 객체에서 존재하지 않는 속성에 접근하는 경우 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Result: undefined */")]),t._v("\n")])])]),s("p",[t._v("아직 다루지 않은 함수나 객체 얘기도 있는데, 우선 첫 번째 항목만 기억해두고 넘어가도 좋습니다.")]),t._v(" "),s("h3",{attrs:{id:"null"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#null"}},[t._v("#")]),t._v(" Null")]),t._v(" "),s("p",[t._v("Null 자료형에 해당하는 "),s("code",[t._v("null")]),t._v(" 값도 "),s("code",[t._v("undefined")]),t._v("처럼 뭔가 비어있는 값이지만, "),s("code",[t._v("undefined")]),t._v("와 다른 점은 "),s("code",[t._v("undefined")]),t._v("는 자바스크립트 엔진에 의해 자동적으로 초기화된 값이고 "),s("code",[t._v("null")]),t._v("은 "),s("em",[t._v("아무 것도 참조하고 있지 않음")]),t._v("을 나타내기 위해 개발자가 "),s("strong",[t._v("의도적으로")]),t._v(" 넣어주는 값이라는 점입니다.")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" unused"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 아직 어떤 값도 대입하지 않아서 비어있음 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" used "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nused "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 의도적으로 빈 값으로 만듦 */")]),t._v("\n")])])]),s("p",[t._v("물론 개발자가 "),s("code",[t._v("undefined")]),t._v(" 값을 할당해줄 수도 있지만, 원래의 용도와 어긋나니 혼동이 생길 수 있습니다.")]),t._v(" "),s("p",[t._v("또한, 위에서 언급했듯이 "),s("code",[t._v("null")]),t._v("은 "),s("em",[t._v("이 변수가 어떤 데이터도 참조하고 있지 않음")]),t._v("을 나타냅니다. 이러한 정보는 자바스크립트 엔진이 불필요한 메모리 영역을 할당 해제하는 가비지 컬렉션을 수행할 때 정리할 메모리를 판단하는 데에 사용될 수 있습니다.\n그러므로 의도적으로 빈 값을 할당할 때에는 "),s("code",[t._v("null")]),t._v("을 사용합시다.")]),t._v(" "),s("p",[t._v("여담으로, "),s("code",[t._v("undefined")]),t._v("는 런타임 시 생성되는 전역 변수이고 "),s("code",[t._v("null")]),t._v("은 예약어입니다.")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 값이 수정되지는 않지만 에러도 일어나지 않습니다. */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* SyntaxError: Unexpected token null */")]),t._v("\n")])])]),s("p",[s("strong",[t._v("물론 되고 안되고를 떠나서 이렇게 헷갈리게 변수를 사용하는 일은 반드시 지양합시다!")])]),t._v(" "),s("p",[t._v("마지막으로 기묘한 점이 하나 있습니다.")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" nullValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" nullValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/* Result: "object" */')]),t._v("\n")])])]),s("p",[s("code",[t._v("null")]),t._v("의 자료형은 Null 타입이고, Null 타입은 Object가 아닌 원시 자료형입니다.\n하지만 typeof 연산자를 통해 확인해보면 자료형이 Object로 출력됩니다.")]),t._v(" "),s("p",[t._v("이 현상은 초기 자바스크립트 설계 상의 버그 때문이라고 하는데, 자세한 내용이 궁금하신 분은 "),s("a",{attrs:{href:"https://github.com/FEDevelopers/tech.description/wiki/%E2%80%9Ctypeof-null%E2%80%9D%EC%9D%98-%EC%97%AD%EC%82%AC",target:"_blank",rel:"noopener noreferrer"}},[t._v("여기"),s("OutboundLink")],1),t._v("서 확인해보시기 바랍니다.")]),t._v(" "),s("p",[t._v("별 것 아닐 수 있지만, 가끔 코드에서 변수의 자료형을 체크하고 싶을 때가 있고 이를 "),s("code",[t._v("typeof")]),t._v("로 수행하고 싶을 때가 있을 수 있습니다. 이때 무심코 "),s("code",[t._v("typeof foo === 'null'")]),t._v(" 와 같은 코드로 처리를 해버리는 실수를 범할 수도 있겠죠. 저도 실제로 이렇게 작성된 코드를 본 적이 있으니 꼭 유의하도록 합시다!")]),t._v(" "),s("h3",{attrs:{id:"object"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object"}},[t._v("#")]),t._v(" Object")]),t._v(" "),s("p",[t._v("원시 자료형 이외의 모든 것은 죄다 Object(객체)입니다. 배열도 객체이고, 함수도 객체이고, 자바스크립트를 이루고 있는 거의 모든 것이 객체입니다.")]),t._v(" "),s("p",[t._v("객체는 내용이 조금 길어질 예정이니 따로 정리해서 올리도록 하겠습니다.")]),t._v(" "),s("h2",{attrs:{id:"명명-규칙"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#명명-규칙"}},[t._v("#")]),t._v(" 명명 규칙")]),t._v(" "),s("p",[t._v("변수명을 지을 때는 다음과 같은 규칙을 따라야 합니다.")]),t._v(" "),s("ul",[s("li",[s("em",[t._v("문자")]),t._v(", underscore(_), dollar sign($)으로 시작하며, 숫자로 시작할 수 없다")]),t._v(" "),s("li",[t._v("반드시 "),s("em",[t._v("문자")]),t._v(", underscore, dollar sign, 숫자로만 이루어져야 한다")]),t._v(" "),s("li",[t._v("변수명은 대소문자를 구분한다")]),t._v(" "),s("li",[t._v("예약어를 사용할 수 없다")])]),t._v(" "),s("p",[s("em",[t._v("문자")]),t._v("... 뭔가 조금 애매한 단어죠? 일반적으로 문자라 하면 알파벳을 떠올리지만, 자바스크립트의 변수명에는 그보다 훨씬 많은 유니코드 문자가 들어갈 수 있습니다. 심지어 한글도 사용할 수 있습니다!\n물론 첫 글자로 올 수 있는 문자와 그 외의 자리에 올 수 있는 문자의 범위가 조금 다르기는 합니다. 사용 가능한 문자에 대한 자세한 정보는 "),s("a",{attrs:{href:"https://mathiasbynens.be/notes/javascript-identifiers-es6",target:"_blank",rel:"noopener noreferrer"}},[t._v("여기"),s("OutboundLink")],1),t._v("에서 확인할 수 있지만... 가급적이면 문자는 "),s("strong",[t._v("underscore, dollar sign 혹은 알파벳")]),t._v("을 사용하는 것이 바람직하지 않나 생각합니다.")]),t._v(" "),s("p",[t._v("예약어란 특정 용도로 사용하기 위해 정해놓은 키워드를 말합니다. 대표적으로 "),s("code",[t._v("if")]),t._v(", "),s("code",[t._v("for")]),t._v(", "),s("code",[t._v("new")]),t._v(" 등 특정 구문에 사용되는 키워드가 있습니다.")]),t._v(" "),s("p",[t._v("현재 정의된 예약어 목록을 확인하고 싶으신 분은 "),s("a",{attrs:{href:"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Lexical_grammar",target:"_blank",rel:"noopener noreferrer"}},[t._v("여기"),s("OutboundLink")],1),t._v("를 참고하시기를 바랍니다.")]),t._v(" "),s("p",[t._v("그리고 정해진 규칙은 아니지만 관습적으로 따르는 규칙이 몇 가지 있습니다.")]),t._v(" "),s("ul",[s("li",[t._v("변수명은 너무 짧거나 너무 길지 않게, 그리고 데이터의 의미를 판단하기 쉽게 짓는다")]),t._v(" "),s("li",[t._v("변수명이 두 단어 이상으로 이루어졌을 경우 camelCase로 작성한다. 물론 다른 naming convention을 사용해도 무방하다. 무엇을 쓰든 일관된 표기법으로 변수명을 짓는다.")])]),t._v(" "),s("p",[t._v("변수의 역할이나 의미를 알기 쉽도록 이름을 짓는다면 코드를 이해하기가 쉬워지고 유지보수가 용이해집니다. 본인의 코드도 종종 이해를 못 할 때가 있는데, 다른 사람이 내 코드를 봤더니 변수명이 그냥 "),s("code",[t._v("a")]),t._v(", "),s("code",[t._v("aa")]),t._v(", "),s("code",[t._v("aaa")]),t._v(" 이런 식으로 되어있으면 다들 머리가 지끈지끈 해질겁니다.")]),t._v(" "),s("p",[t._v("여러 naming convention 중에는 "),s("em",[t._v("여러 단어로 구성된 변수명을 어떻게 쓸까")]),t._v("를 나타내는 것이 있습니다. 대표적으로 아래와 같은 규칙이 있습니다.")]),t._v(" "),s("ul",[s("li",[t._v("camelCase: 모든 단어를 붙이고, 첫 단어를 제외한 모든 단어의 첫 문자를 대문자로 쓴다")]),t._v(" "),s("li",[t._v("PascalCase: 모든 단어를 붙이고, 모든 단어의 첫 문자를 대문자로 쓴다")]),t._v(" "),s("li",[t._v("snake_case: underscore로 단어를 연결한다")]),t._v(" "),s("li",[t._v("kebab-case: hyphen(-)으로 단어를 연결한다")])]),t._v(" "),s("p",[t._v("이 중에 올바른 표기법이 있고 잘못된 표기법이 있는 것은 아닙니다(사용할 수 없는 표기법은 있을 수 있지만). 이게 좋네 저게 좋네 하면서 논쟁을 벌이면 아마 끝이 안 날거예요.")]),t._v(" "),s("p",[t._v("다만, 현재 대부분의 자바스크립트 라이브러리가 camelCase를 사용하고 있기 때문에 개발자들도 대체로 camelCase를 사용합니다. 물론 이것은 반드시 지켜야 하는 규칙이 아니기 때문에 camelCase가 마음에 안 들면 다른 표기법을 사용해도 됩니다. 대신 가독성을 위해 일관된 표기법으로 변수명을 짓는 것이 좋습니다.")]),t._v(" "),s("h2",{attrs:{id:"reference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[t._v("#")]),t._v(" Reference")]),t._v(" "),s("ul",[s("li",[t._v("자바스크립트의 자료형 - JavaScript | MDN "),s("a",{attrs:{href:"https://developer.mozilla.org/ko/docs/Web/JavaScript/Data_structures",target:"_blank",rel:"noopener noreferrer"}},[t._v("Link"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("자바스크립트 변수, 자료형 - ZeroCho Blog "),s("a",{attrs:{href:"https://www.zerocho.com/category/JavaScript/post/57271d6e5aec14515b949b4b",target:"_blank",rel:"noopener noreferrer"}},[t._v("Link"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("Data type & Variable | PoiemaWeb "),s("a",{attrs:{href:"https://poiemaweb.com/js-data-type-variable",target:"_blank",rel:"noopener noreferrer"}},[t._v("Link"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("Difference Between "),s("code",[t._v("null")]),t._v(" and "),s("code",[t._v("undefined")]),t._v(" in JavaScript | TO THE NEW Blog "),s("a",{attrs:{href:"https://www.tothenew.com/blog/difference-between-undefined-and-null-in-javascript/#",target:"_blank",rel:"noopener noreferrer"}},[t._v("Link"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=n.exports}}]);